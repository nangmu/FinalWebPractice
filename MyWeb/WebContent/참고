1-1: 설치, 간단한 페이지 작업, db작성(mysql), jdbc(dbcp사용), context root 재설정 
1-2: UserDao, 회원가입,가입유저뷰(페이징), logback적용(+템플릿)
2: 로그인체크(세션),BoardDao,게시판(답변,페이징), [[검색, 리팩토링  진행중...]]
[현재 구조]
client가 서버에 처음으로 요청하는 자원이 mainView.jsp라 가정한다.(WEB-INF밖에 있어 다른 url로 임의 접근 가능)

Client <---> JSP View(...) <----> Servlet(...)<----> DAO(User,Board,Paging) <----> DB             
----------------------------------------------------------------------------------------
현재 문제점들.
1. jsp에 임의 접근이 가능하다. jsp 파일에 임의 접근을 하지 못하도록 막자.(위치변경or설정or구조변경) 
2. 서블릿 전체가 연결되어 요청을 주고 받는다. 자원낭비, 추적이 어렵다.
--> FrontController 도입하여 모든 요청을 한곳에서 받고 되도록 서블릿만 jsp에 접근 가능하도록 하자.
2. SQL Exception 처리 부분이 중복되고 가독성을 떨어뜨림. 
-->잡아줘도 처리할 수가 없기 때문에 RuntimeException 바꿔서 처리 부분을 제거하자.
3. JSTL,EL 미적용 
4. 상당히 많은 중복코드. 리팩토링 필요

개인적인 문제점:
1. 네이밍이 체계적이지 않아서 상당히 헷갈린다.
2. test코드를 작성하지 않았다.
 -----------------------------------------------------------------
3: 구조변경: 하나의 서블릿에서 모든 HTTP요청을 받고 초기화한 후 요구하는 자원에 맞는 Controller에게 넘겨주도록 변경.
1)DispatcherServlet내에서 요청 url에 맞는 Controller을 직접 생성. 이러한 방법은 if,else 구문으로 Controller가 추가
될때마다 계속 변경해줘야 됨. 그리고 요청이 올 때마다 객체를 생성해주어야 하는 부담감이 있음.
2)위 단점을 보완하고자 RequestMapping 클래스를 만들어 Controller 인스턴스들을 url과 미리 매핑시켜놓고 사용.
요청 추가 때마다 DispatcherServlet 재컴파일방지, 인스턴스 재활용.
3)controller 처리 후 사용자에게 결과를 알려주어야함(요청이 실패했는지, 성공했는지, 진행중인지 그리고 이에 따른 결과페이지)
에러,성공 등 결과 페이지를 보여주기 위해 jsp에 forward를 통한 위임을 하거나, redirect를 통해 클라이언트가 다른 요청을 하도록 해야함.
controller에서 처리후 DispatcherService로 이러한 정보가 전달되어야 함. req.setAttribute("view","xx.jsp")사용?
이럴 바에 controller의 리턴값으로 주는게 편함(아직은 리턴값이 굉장히 단순하기 때문 - redirect:path, path.jsp)
변경 및 테스트 완료. 추가로 jsp에 임의 접근이 불가하도록 jsp파일들을 WEB-INF에 넣어줌.
4)로그인체크 중복을 제거하기 위해 필터로 빼서 컨트롤러로 요청이 가기 전에 먼저 처리되도록 LoginFilter 추가
5)Controller 추가도중 아무런 작업도 하지 않고 이동만 하는 Controller가 많아짐. 이동을 전담하는 ForwardController 추가
6)LoginController 수정중 dao의 SQL 익셉션이 거슬림. 런타임 Exception 추가.
7) 6)과 DAO 리팩토링 일부 완료
8) 전부 변경 완료. 네이밍 수정. 로그아웃 추가. 필터 추가(로그인 유무에 따라 url 접근 제한). 

